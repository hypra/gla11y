#!/usr/bin/env python
#
# Copyright (c) 2018 Martin Pieuchot <mpi@grenadille.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Take LibreOffice (glade) .ui files and check for non accessible widgets

from __future__ import print_function

import os
import sys
import getopt
import lxml.etree as ET

progname = os.path.basename(sys.argv[0])
logprefixes = []
logfile = sys.stdout
pflag = False
Wflag = False
errors = 0
errexists = 0
warnings = 0
warnexists = 0
widgets_ignored = ['GtkBox', 'GtkVBox']


def errstr(elm):
    """
    Print the line number or the XML class path.
    """
    global pflag

    if pflag:
        path = elm.attrib['class']
        elm = elm.getparent()
        while elm is not None:
            klass = elm.attrib.get('class')
            if klass is not None:
                path = klass + '/' + path
            elm = elm.getparent()
        return path
    return str(elm.sourceline)


def err(filename, elm, msg):
    global errors, errexists

    prefix = "%s:%s" % (filename, errstr(elm))
    if prefix in logprefixes:
        errexists += 1
        return

    errors += 1
    print(prefix + " ERROR: " + msg, file=logfile)


def warn(filename, elm, msg):
    global Wflag, errors, errexists, warnings, warnexists

    prefix = "%s:%s" % (filename, errstr(elm))
    if prefix in logprefixes:
        if Wflag:
            errexists += 1
        else:
            warnexists += 1
        return

    if Wflag:
        errors += 1
    else:
        warnings += 1
    print(prefix + " WARNING: " + msg, file=logfile)


def check_a11y_relation(filename, root):
    """
    Emit an error message if any of the 'object' elements of the XML
    document represented by `root' doesn't comply with Accessibility
    rules.
    """
    global widgets_ignored

    for obj in root.iter('object'):
        if obj.attrib['class'] in widgets_ignored:
            continue

        if obj.attrib['class'] == 'GtkLabel':
            # Case 0: A 'GtkLabel' must contain one or more "label-for"
            # pointing to existing elements or...
            rels = obj.findall("accessibility/relation[@type='label-for']")
            if len(rels) > 0:
                for rel in rels:
                    target = rel.attrib['target']
                    targets = root.iterfind(".//object[@id='%s']" % target)
                    if len(list(targets)) == 0:
                        err(filename, rel,
                            "use of undeclared target '%s'" % target)
                continue

            # ...a single "mnemonic_widget"
            properties = obj.findall("property[@name='mnemonic_widget']")
            if len(properties) > 1:
                lines = ', '.join([str(p.sourceline) for p in properties])
                err(filename, obj, "too many sub-elements"
                    ", expected single <property name='mnemonic_widgets'>"
                    ": lines %s" % lines)
                continue
            if len(properties) == 1:
                prop = properties[0]
                objects = root.iterfind(".//object[@id='%s']" % prop.text)
                if len(list(objects)) == 0:
                    err(filename, prop,
                        "use of undeclared target '%s'" % prop.text)
                continue
            warn(filename, obj, "missing sub-element"
                 ", expected single <property name='mnemonic_widgets'> or "
                 "one or more <relation type='label-for'>")
            continue

        # Case 1: has a <child internal-child="accessible"> sub-element
        children = obj.findall("child[@internal-child='accessible']")
        if children:
            if len(children) > 1:
                lines = ', '.join([str(c.sourceline) for c in children])
                err(filename, obj, "too many sub-elements"
                    ", expected single <child internal-child='accessible'>"
                    ": lines %s" % lines)
            continue

        # Case 2: has an <accessibility> sub-element with a "labelled-by"
        # <relation> pointing to an existing element.
        rels = obj.findall("accessibility/relation[@type='labelled-by']")
        if len(rels) > 0:
            for rel in rels:
                target = rel.attrib['target']
                targets = root.iterfind(".//object[@id='%s']" % target)
                if len(list(targets)) == 0:
                    err(filename, rel,
                        "use of undeclared target '%s'" % target)
            continue

        # Case 3/4: has an ID...
        oid = obj.attrib.get('id')
        if oid is not None:
            # ...referenced by a single "label-for" <relation>
            rels = root.iterfind(".//relation[@target='%s']" % oid)
            labelfor = [r for r in rels if r.attrib.get('type') == 'label-for']
            if len(labelfor) == 1:
                continue
            if len(labelfor) > 1:
                lines = ', '.join([str(l.sourceline) for l in labelfor])
                err(filename, obj, "too many elements"
                    ", expected single <relation type='label-for' target='%s'>"
                    ": lines %s" % (oid, lines))
                continue

            # ...referenced by a single "mnemonic_widget"
            props = root.iterfind(".//property[@name='mnemonic_widget']")
            props = [p for p in props if p.text == oid]
            if len(props) == 1:
                continue
            if len(props) > 1:
                lines = ', '.join([str(p.sourceline) for p in props])
                err(filename, obj, "'%s' has multiple mnemonic_widget:"
                    " lines %s" % (obj.attrib['class'], lines))
                err(filename, obj, "too many elements"
                    ", expected single "
                    "<property name='mnemonic_widgets'>%s</property>"
                    ": lines %s" % (oid, lines))
                continue

            warn(filename, obj, "element '%s' has no relation" % oid)
            continue

        klass = obj.attrib['class']
        warn(filename, obj, "'%s' is missing some a11y love" % klass)


def usage():
    print("%s [-pW] [-i widgets] [-l log [-a]] [file ...]" % progname,
          file=sys.stderr)
    sys.exit(2)


def main():
    global pflag, Wflag, logfile, logprefixes, widgets_ignored

    try:
        opts, args = getopt.getopt(sys.argv[1:], "ai:Il:pW")
    except getopt.GetoptError:
        usage()

    lfile = None
    ignore = False
    append = False
    widgets = []

    for o, a in opts:
        if o == "-a":
            append = True
        elif o == "-i":
            widgets = a.split(',')
        elif o == "-I":
            ignore = True
        elif o == "-l":
            lfile = a
        elif o == "-p":
            pflag = True
        elif o == "-W":
            Wflag = True

    if ignore and widgets:
        usage()

    if ignore:
        widgets_ignored = []
    elif widgets:
        widgets_ignored.extend(widgets)

    if lfile is not None:
        import os

        if os.path.exists(lfile):
            log = open(lfile, 'r+')
            logprefixes = [f.split(' ')[0] for f in log.readlines()]
            log.close()

        if append:
            logfile = open(lfile, 'a')
        pflag = True

    if not args:
        sys.exit("%s: no input files" % progname)

    for filename in args:
        try:
            tree = ET.parse(filename)
        except ET.ParseError:
            sys.exit("%s: malformatted xml file: %s" % (progname, filename))
        except IOError:
            sys.exit("%s: non existing file: %s" % (progname, filename))

        try:
            check_a11y_relation(filename, tree.getroot())
        except Exception as error:
            import traceback
            traceback.print_exc()
            sys.exit("%s: error parsing file: %s" % (progname, filename))

    if errors > 0 or errexists > 0:
        estr = "%s error%s generated" % (errors, 's' if errors > 1 else '')
        if errexists > 0:
            estr += " (%s suppressed)" % errexists
        print(estr)

    if warnings > 0 or warnexists > 0:
        wstr = "%s warning%s generated" % (warnings,
                                           's' if warnings > 1 else '')
        if warnexists > 0:
            wstr += " (%s suppressed)" % warnexists
        print(wstr)

    if errors > 0:
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
